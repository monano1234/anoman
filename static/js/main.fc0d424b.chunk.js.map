{"version":3,"sources":["constants.js","Board.js","utils.js","minimax.js","styles.js","ResultModal.js","TicTacToe.js","App.js","serviceWorker.js","index.js"],"names":["SCORES","1","0","2","GAME_STATES","GAME_MODES","easy","medium","difficult","Board","grid","makeMove","square","player","getEmptySquares","squares","forEach","i","push","isEmpty","length","getWinner","winningCombos","res","el","winningIndex","getStrikethroughStyles","defaultWidth","clone","concat","this","Array","fill","switchPlayer","getRandomInt","min","max","Math","ceil","floor","random","minimax","board","thisScore","mult","String","maxScore","bestMove","empty","copy","border","css","customStyles","overlay","backgroundColor","ResultModal","isOpen","close","startNewGame","winner","StyledModal","onRequestClose","style","ariaHideApp","ModalWrapper","ModalTitle","ModalContent","ModalFooter","Button","onClick","styled","Modal","div","p","displayName","button","arr","Container","dims","Square","Marker","ButtonRow","Screen","Inner","ChooseText","Strikethrough","styles","TicTacToe","useState","human","computer","players","setPlayers","gameState","setGameState","setGrid","setWinner","nextMove","setNextMove","modalOpen","setModalOpen","mode","setMode","useEffect","winnerStr","setTimeout","declareWinner","move","useCallback","index","gridCopy","computerMove","emptyIndices","includes","timeout","clearTimeout","choosePlayer","option","onChange","e","target","value","Object","keys","map","key","gameMode","isActive","data-testid","humanMove","Main","main","Footer","footer","FooterInner","App","href","Boolean","window","location","hostname","match","setAppElement","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kNAKaA,EAAS,CACpBC,EAAG,EACHC,EAAG,EACHC,GAAI,GAGOC,EACC,cADDA,EAEC,cAFDA,EAGL,OAGKC,EAAa,CACxBC,KAAM,OACNC,OAAQ,SACRC,UAAW,a,QClBQC,EACnB,WAAYC,GAAO,IAAD,gCAKlBC,SAAW,SAACC,EAAQC,GACQ,OAAtB,EAAKH,KAAKE,KACZ,EAAKF,KAAKE,GAAUC,IAPN,KAYlBC,gBAAkB,WAAuB,IAAtBJ,EAAqB,uDAAd,EAAKA,KACzBK,EAAU,GAId,OAHAL,EAAKM,SAAQ,SAACJ,EAAQK,GACL,OAAXL,GAAiBG,EAAQG,KAAKD,MAE7BF,GAjBS,KAoBlBI,QAAU,WAAuB,IAAtBT,EAAqB,uDAAd,EAAKA,KACrB,OAAO,EAAKI,gBAAgBJ,GAAMU,SAA3B,SDvBS,ECuBqC,IArBrC,KAwBlBC,UAAY,WAAuB,IAAtBX,EAAqB,uDAAd,EAAKA,KACjBY,EAAgB,CACpB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAELC,EAAM,KAcV,OAbAD,EAAcN,SAAQ,SAACQ,EAAIP,GAEP,OAAhBP,EAAKc,EAAG,KACRd,EAAKc,EAAG,MAAQd,EAAKc,EAAG,KACxBd,EAAKc,EAAG,MAAQd,EAAKc,EAAG,KAExBD,EAAMb,EAAKc,EAAG,IACd,EAAKC,aAAeR,GACH,OAARM,GAAsD,IAAtC,EAAKT,gBAAgBJ,GAAMU,SACpDG,ED9CY,EC+CZ,EAAKE,aAAe,SAGjBF,GAjDS,KAuDlBG,uBAAyB,WACvB,IAAMC,EAAe,IAErB,OAAQ,EAAKF,cACX,KAAK,EACH,MAAM,+FAAN,OAIWE,EAJX,iBAMF,KAAK,EACH,MAAM,gGAAN,OAIWA,EAJX,iBAMF,KAAK,EACH,MAAM,gGAAN,OAIWA,EAJX,iBAMF,KAAK,EACH,MAAM,0GAAN,OAIWA,EAJX,iBAMF,KAAK,EACH,MAAM,yGAAN,OAIWA,EAJX,iBAMF,KAAK,EACH,MAAM,0GAAN,OAIWA,EAJX,iBAMF,KAAK,EACH,MAAM,0GAAN,OA7CkB,IA6ClB,iBAMF,KAAK,EACH,MAAM,2GAAN,OApDkB,IAoDlB,iBAMF,QACE,OAAO,OApHK,KAwHlBC,MAAQ,WACN,OAAO,IAAInB,EAAM,EAAKC,KAAKmB,WAxH3BC,KAAKpB,KAAOA,GAAQ,IAAIqB,MAAJ,SDHJ,ECGsB,IAAGC,KAAK,MAC9CF,KAAKL,aAAe,MCHXQ,EAAe,SAAApB,GAC1B,OFAsB,IEAfA,EFCe,EADA,GEGXqB,EAAe,SAACC,EAAKC,GAGhC,OAFAD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAKG,UAAYJ,EAAMD,EAAM,IAAMA,G,QCN1CM,EAAU,SAAVA,EAAWC,EAAO7B,GAC7B,IACI8B,EADEC,EAAO5C,EAAO6C,OAAOhC,IAEvBiC,GAAY,EACZC,EAAW,KAEf,GAA0B,OAAtBL,EAAMrB,YACR,MAAO,CAACrB,EAAO0C,EAAMrB,aAAc,GAC7B,IAAD,gBACaqB,EAAM5B,mBADnB,IACL,2BAA2C,CAAC,IAAnCkC,EAAkC,QACrCC,EAAOP,EAAMd,QACjBqB,EAAKtC,SAASqC,EAAOnC,IACrB8B,EAAYC,EAAOH,EAAQQ,EAAMhB,EAAapB,IAAS,KAEtCiC,IACfA,EAAWH,EACXI,EAAWC,IARV,8BAYL,MAAO,CAACJ,EAAOE,EAAUC,I,yRCrBtB,IAAMG,EAASC,YAAH,K,ylCCGnB,IAAMC,EAAe,CACnBC,QAAS,CACPC,gBAAiB,qBAIRC,EAAc,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,OAAQC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,aAAcC,EAAa,EAAbA,OACzD,OACE,cAACC,EAAD,CACEJ,OAAQA,EACRK,eAAgBJ,EAChBK,MAAOV,EACPW,aAAa,EAJf,SAME,eAACC,EAAD,WACE,cAACC,EAAD,wBACA,cAACC,EAAD,UAAeP,IAEf,eAACQ,EAAD,WACE,cAACC,EAAD,CAAQC,QAASZ,EAAjB,mBACA,cAACW,EAAD,CAAQC,QAASX,EAAjB,iCAMJE,EAAcU,YAAOC,IAAPD,CAAH,KAYXN,EAAeM,IAAOE,IAAV,IAUdtB,GAGEe,EAAaK,IAAOG,EAAV,KASVP,EAAeI,IAAOG,EAAV,KAIlBP,EAAaQ,YAAc,eAE3B,IAAMP,EAAcG,IAAOE,IAAV,KAOXJ,EAASE,IAAOK,OAAV,K,2kCC7DZ,IAAMC,EAAM,IAAI7C,MAAJ,SNhBQ,EMgBU,IAAGC,KAAK,MAChCU,EAAQ,IAAIjC,EAiMZoE,EAAYP,IAAOE,IAAV,KAGJ,gBAAGM,EAAH,EAAGA,KAAH,gBAAqB,IAAJA,EAAjB,SAKLC,EAAST,IAAOE,IAAV,INjNe,QMuNvBtB,GAOJ6B,EAAOL,YAAc,SAErB,IAAMM,EAASV,IAAOG,EAAV,KAINQ,EAAYX,IAAOE,IAAV,KAMTU,EAASZ,IAAOE,IAAV,KAENW,GAAQb,IAAOE,IAAV,KAMLY,GAAad,IAAOG,EAAV,KAEVY,GAAgBf,IAAOE,IAAV,KAEf,qBAAGc,UAGI,qBAAGA,QAAwB,SAGvBC,GAlPG,SAAC,GAAuB,IAAD,IAApBxE,eAAoB,MAAV6D,EAAU,IACTY,mBAAS,CAAEC,MAAO,KAAMC,SAAU,OADzB,mBAChCC,EADgC,KACvBC,EADuB,OAELJ,mBAASpF,GAFJ,mBAEhCyF,EAFgC,KAErBC,EAFqB,OAGfN,mBAASzE,GAHM,mBAGhCL,EAHgC,KAG1BqF,EAH0B,OAIXP,mBAAS,MAJE,mBAIhC7B,EAJgC,KAIxBqC,EAJwB,OAKPR,mBAAS,MALF,mBAKhCS,EALgC,KAKtBC,EALsB,OAMLV,oBAAS,GANJ,mBAMhCW,EANgC,KAMrBC,EANqB,OAOfZ,mBAASnF,EAAWE,QAPL,mBAOhC8F,EAPgC,KAO1BC,EAP0B,KAYvCC,qBAAU,WACR,IAAM5C,EAASjB,EAAMrB,UAAUX,GAoBhB,OAAXiD,GAAmBkC,IAAczF,GAnBf,SAAAuD,GACpB,IAAI6C,EACJ,OAAQ7C,GACN,KNlCgB,EMmCd6C,EAAY,iBACZ,MACF,KNpCgB,EMqCdA,EAAY,iBACZ,MACF,KNzCY,EM0CZ,QACEA,EAAY,cAEhBV,EAAa1F,GACb4F,EAAUQ,GAEVC,YAAW,kBAAML,GAAa,KAAO,KAIrCM,CAAc/C,KAEf,CAACkC,EAAWnF,EAAMuF,IAQrB,IAAMU,EAAOC,uBACX,SAACC,EAAOhG,GACFA,GAAUgF,IAAczF,GAC1B2F,GAAQ,SAAArF,GACN,IAAMoG,EAAWpG,EAAKmB,SAEtB,OADAiF,EAASD,GAAShG,EACXiG,OAIb,CAACjB,IAQGkB,EAAeH,uBAAY,WAE/B,IAEIC,EAFEnE,EAAQ,IAAIjC,EAAMC,EAAKmB,UACvBmF,EAAetE,EAAM5B,gBAAgBJ,GAE3C,OAAQ2F,GACN,KAAKhG,EAAWC,KACd,GACEuG,EAAQ3E,EAAa,EAAG,UAChB8E,EAAaC,SAASJ,IAChC,MACF,KAAKxG,EAAWE,OAGd,IADmBmC,EAAMvB,QAAQT,IAAS2B,KAAKG,SAAW,GAExDqE,EAAQpE,EAAQC,EAAOiD,EAAQD,UAAU,QAEzC,GACEmB,EAAQ3E,EAAa,EAAG,UAChB8E,EAAaC,SAASJ,IAElC,MACF,KAAKxG,EAAWG,UAChB,QACEqG,EAAQnE,EAAMvB,QAAQT,GAClBwB,EAAa,EAAG,GAChBO,EAAQC,EAAOiD,EAAQD,UAAU,GAEpChF,EAAKmG,KACRF,EAAKE,EAAOlB,EAAQD,UACpBQ,EAAYP,EAAQF,UAErB,CAACkB,EAAMjG,EAAMiF,EAASU,IAKzBE,qBAAU,WACR,IAAIW,EAWJ,OATe,OAAbjB,GACAA,IAAaN,EAAQD,UACrBG,IAAczF,IAGd8G,EAAUT,YAAW,WACnBM,MACC,MAEE,kBAAMG,GAAWC,aAAaD,MACpC,CAACjB,EAAUc,EAAcpB,EAAQD,SAAUG,IAE9C,IAOMuB,EAAe,SAAAC,GACnBzB,EAAW,CAAEH,MAAO4B,EAAQ3B,SAAUzD,EAAaoF,KACnDvB,EAAa1F,GACb8F,EN7IoB,IM0JtB,OAAOL,IAAczF,EACnB,eAAC8E,EAAD,WACE,eAACC,GAAD,WACE,cAACC,GAAD,gCACA,wBAAQkC,SARK,SAAAC,GACjBjB,EAAQiB,EAAEC,OAAOC,QAOiBA,MAAOpB,EAArC,SACGqB,OAAOC,KAAKtH,GAAYuH,KAAI,SAAAC,GAC3B,IAAMC,EAAWzH,EAAWwH,GAC5B,OACE,wBAAuBJ,MAAOK,EAA9B,SACGD,GADUC,WAOrB,eAAC3C,GAAD,WACE,cAACC,GAAD,iCACA,eAACH,EAAD,WACE,wBAAQZ,QAAS,kBAAM+C,EN5KT,IM4Kd,eACA,mCACA,wBAAQ/C,QAAS,kBAAM+C,EN7KT,IM6Kd,wBAKN,eAACvC,EAAD,CAAWC,KNrLK,EMqLhB,UACGpE,EAAKkH,KAAI,SAACH,EAAOZ,GAChB,IAAMkB,EAAqB,OAAVN,EAEjB,OACE,cAAC1C,EAAD,CACEiD,cAAA,iBAAuBnB,GAEvBxC,QAAS,kBAxDD,SAAAwC,GACXnG,EAAKmG,IAAUZ,IAAaN,EAAQF,QACvCkB,EAAKE,EAAOlB,EAAQF,OACpBS,EAAYP,EAAQD,WAqDCuC,CAAUpB,IAH3B,SAKGkB,GAAY,cAAC/C,EAAD,UN7LD,IM6LUyC,EAAqB,IAAM,OAH5CZ,MAOX,cAACxB,GAAD,CACEC,OACEO,IAAczF,GAAoBsC,EAAMhB,2BAG5C,cAAC,EAAD,CACE8B,OAAQ2C,EACRxC,OAAQA,EACRF,MAAO,kBAAM2C,GAAa,IAC1B1C,aA1De,WACnBoC,EAAa1F,GACb2F,EAAQnB,GACRwB,GAAa,U,0bCjIjB,IAAM8B,GAAO5D,IAAO6D,KAAV,MAQJC,GAAS9D,IAAO+D,OAAV,MAONC,GAAchE,IAAOE,IAAV,MAGF+D,GAlCf,WACE,OACE,qCACE,cAACL,GAAD,UACE,cAAC,GAAD,MAEF,cAACE,GAAD,UACE,eAACE,GAAD,8BACmB,IACjB,mBAAGE,KAAK,kDAAR,6BCFUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNtE,IAAMuE,cAAc,SACpBC,IAASC,OAAO,cAAC,GAAD,IAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fc0d424b.chunk.js","sourcesContent":["//Board dimensions\nexport const DIMS = 3;\nexport const DRAW = 0;\nexport const PLAYER_X = 1;\nexport const PLAYER_O = 2;\nexport const SCORES = {\n  1: 1,\n  0: 0,\n  2: -1\n};\nexport const SQUARE_DIMS = 100;\nexport const GAME_STATES = {\n  notStarted: \"not_started\",\n  inProgress: \"in_progress\",\n  over: \"over\"\n};\n\nexport const GAME_MODES = {\n  easy: \"easy\",\n  medium: \"medium\",\n  difficult: \"difficult\"\n};\n","import { DIMS, DRAW } from \"./constants\";\n\nexport default class Board {\n  constructor(grid) {\n    this.grid = grid || new Array(DIMS ** 2).fill(null);\n    this.winningIndex = null;\n  }\n\n  makeMove = (square, player) => {\n    if (this.grid[square] === null) {\n      this.grid[square] = player;\n    }\n  };\n\n  // Collect indices of empty squares and return them\n  getEmptySquares = (grid = this.grid) => {\n    let squares = [];\n    grid.forEach((square, i) => {\n      if (square === null) squares.push(i);\n    });\n    return squares;\n  };\n\n  isEmpty = (grid = this.grid) => {\n    return this.getEmptySquares(grid).length === DIMS ** 2;\n  };\n\n  getWinner = (grid = this.grid) => {\n    const winningCombos = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n    let res = null;\n    winningCombos.forEach((el, i) => {\n      if (\n        grid[el[0]] !== null &&\n        grid[el[0]] === grid[el[1]] &&\n        grid[el[0]] === grid[el[2]]\n      ) {\n        res = grid[el[0]];\n        this.winningIndex = i;\n      } else if (res === null && this.getEmptySquares(grid).length === 0) {\n        res = DRAW;\n        this.winningIndex = null;\n      }\n    });\n    return res;\n  };\n\n  /**\n   * Get the styles for strike through based on the combination that won\n   */\n  getStrikethroughStyles = () => {\n    const defaultWidth = 285;\n    const diagonalWidth = 400;\n    switch (this.winningIndex) {\n      case 0:\n        return `\n          transform: none;\n          top: 41px;\n          left: 15px;\n          width: ${defaultWidth}px;\n        `;\n      case 1:\n        return `\n          transform: none;\n          top: 140px;\n          left: 15px;\n          width: ${defaultWidth}px;\n        `;\n      case 2:\n        return `\n          transform: none;\n          top: 242px;\n          left: 15px;\n          width: ${defaultWidth}px;\n        `;\n      case 3:\n        return `\n          transform: rotate(90deg);\n          top: 145px;\n          left: -86px;\n          width: ${defaultWidth}px;\n        `;\n      case 4:\n        return `\n          transform: rotate(90deg);\n          top: 145px;\n          left: 15px;\n          width: ${defaultWidth}px;\n        `;\n      case 5:\n        return `\n          transform: rotate(90deg);\n          top: 145px;\n          left: 115px;\n          width: ${defaultWidth}px;\n        `;\n      case 6:\n        return `\n          transform: rotate(45deg);\n          top: 145px;\n          left: -44px;\n          width: ${diagonalWidth}px;\n        `;\n      case 7:\n        return `\n          transform: rotate(-45deg);\n          top: 145px;\n          left: -46px;\n          width: ${diagonalWidth}px;\n        `;\n      default:\n        return null;\n    }\n  };\n\n  clone = () => {\n    return new Board(this.grid.concat());\n  };\n}\n","import { PLAYER_O, PLAYER_X } from \"./constants\";\n\nexport const switchPlayer = player => {\n  return player === PLAYER_X ? PLAYER_O : PLAYER_X;\n};\n\nexport const getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n","import { SCORES } from \"./constants\";\nimport { switchPlayer } from \"./utils\";\n\nexport const minimax = (board, player) => {\n  const mult = SCORES[String(player)];\n  let thisScore;\n  let maxScore = -1;\n  let bestMove = null;\n\n  if (board.getWinner() !== null) {\n    return [SCORES[board.getWinner()], 0];\n  } else {\n    for (let empty of board.getEmptySquares()) {\n      let copy = board.clone();\n      copy.makeMove(empty, player);\n      thisScore = mult * minimax(copy, switchPlayer(player))[0];\n\n      if (thisScore >= maxScore) {\n        maxScore = thisScore;\n        bestMove = empty;\n      }\n    }\n\n    return [mult * maxScore, bestMove];\n  }\n};\n","import { css } from \"styled-components\";\n\nexport const border = css`\n  border-bottom-left-radius: 15px 255px;\n  border-bottom-right-radius: 225px 15px;\n  border-top-left-radius: 255px 15px;\n  border-top-right-radius: 15px 225px;\n  border: 2px solid #41403e;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Modal from \"react-modal\";\nimport { border } from \"./styles\";\n\nconst customStyles = {\n  overlay: {\n    backgroundColor: \"rgba(0,0,0, 0.6)\"\n  }\n};\n\nexport const ResultModal = ({ isOpen, close, startNewGame, winner }) => {\n  return (\n    <StyledModal\n      isOpen={isOpen}\n      onRequestClose={close}\n      style={customStyles}\n      ariaHideApp={false}\n    >\n      <ModalWrapper>\n        <ModalTitle>Game over</ModalTitle>\n        <ModalContent>{winner}</ModalContent>\n\n        <ModalFooter>\n          <Button onClick={close}>Close</Button>\n          <Button onClick={startNewGame}>Start over</Button>\n        </ModalFooter>\n      </ModalWrapper>\n    </StyledModal>\n  );\n};\nconst StyledModal = styled(Modal)`\n  height: 300px;\n  position: relative;\n  margin: 0 auto;\n  top: 10%;\n  right: auto;\n  bottom: auto;\n  width: 320px;\n  outline: none;\n  display: flex;\n  flex-direction: column;\n`;\nconst ModalWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 24px;\n  background-color: #fff;\n  max-height: 100%;\n  height: 100%;\n  align-items: center;\n  backface-visibility: hidden;\n  padding: 1.25rem;\n  ${border};\n`;\n\nconst ModalTitle = styled.p`\n  display: flex;\n  align-items: center;\n  margin-bottom: 20px;\n  font-size: 24px;\n  font-weight: bold;\n  text-transform: uppercase;\n`;\n\nconst ModalContent = styled.p`\n  flex: 1 1 auto;\n  text-align: center;\n`;\nModalContent.displayName = \"ModalContent\";\n\nconst ModalFooter = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex: 0 0 auto;\n  width: 100%;\n`;\n\nconst Button = styled.button`\n  font-size: 16px;\n`;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport {\n  PLAYER_X,\n  PLAYER_O,\n  SQUARE_DIMS,\n  DRAW,\n  GAME_STATES,\n  DIMS,\n  GAME_MODES\n} from \"./constants\";\nimport Board from \"./Board\";\nimport { getRandomInt, switchPlayer } from \"./utils\";\nimport { minimax } from \"./minimax\";\nimport { ResultModal } from \"./ResultModal\";\nimport { border } from \"./styles\";\n\nconst arr = new Array(DIMS ** 2).fill(null);\nconst board = new Board();\n\nconst TicTacToe = ({ squares = arr }) => {\n  const [players, setPlayers] = useState({ human: null, computer: null });\n  const [gameState, setGameState] = useState(GAME_STATES.notStarted);\n  const [grid, setGrid] = useState(squares);\n  const [winner, setWinner] = useState(null);\n  const [nextMove, setNextMove] = useState(null);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [mode, setMode] = useState(GAME_MODES.medium);\n\n  /**\n   * On every move, check if there is a winner. If yes, set game state to over and open result modal\n   */\n  useEffect(() => {\n    const winner = board.getWinner(grid);\n    const declareWinner = winner => {\n      let winnerStr;\n      switch (winner) {\n        case PLAYER_X:\n          winnerStr = \"Player X wins!\";\n          break;\n        case PLAYER_O:\n          winnerStr = \"Player O wins!\";\n          break;\n        case DRAW:\n        default:\n          winnerStr = \"It's a draw\";\n      }\n      setGameState(GAME_STATES.over);\n      setWinner(winnerStr);\n      // Slight delay for the modal so there is some time to see the last move\n      setTimeout(() => setModalOpen(true), 300);\n    };\n\n    if (winner !== null && gameState !== GAME_STATES.over) {\n      declareWinner(winner);\n    }\n  }, [gameState, grid, nextMove]);\n\n  /**\n   * Set the grid square with respective player that made the move. Only make a move when the game is in progress.\n   * useCallback is necessary to prevent unnecessary recreation of the function, unless gameState changes, since it is\n   * being tracked in useEffect\n   * @type {Function}\n   */\n  const move = useCallback(\n    (index, player) => {\n      if (player && gameState === GAME_STATES.inProgress) {\n        setGrid(grid => {\n          const gridCopy = grid.concat();\n          gridCopy[index] = player;\n          return gridCopy;\n        });\n      }\n    },\n    [gameState]\n  );\n\n  /**\n   * Make computer move. If it's the first move (board is empty), make move at any random cell to skip\n   * unnecessary minimax calculations\n   * @type {Function}\n   */\n  const computerMove = useCallback(() => {\n    // Important to pass a copy of the grid here\n    const board = new Board(grid.concat());\n    const emptyIndices = board.getEmptySquares(grid);\n    let index;\n    switch (mode) {\n      case GAME_MODES.easy:\n        do {\n          index = getRandomInt(0, 8);\n        } while (!emptyIndices.includes(index));\n        break;\n      case GAME_MODES.medium:\n        // Medium level is basically ~half of the moves are minimax and the other ~half random\n        const smartMove = !board.isEmpty(grid) && Math.random() < 0.5;\n        if (smartMove) {\n          index = minimax(board, players.computer)[1];\n        } else {\n          do {\n            index = getRandomInt(0, 8);\n          } while (!emptyIndices.includes(index));\n        }\n        break;\n      case GAME_MODES.difficult:\n      default:\n        index = board.isEmpty(grid)\n          ? getRandomInt(0, 8)\n          : minimax(board, players.computer)[1];\n    }\n    if (!grid[index]) {\n      move(index, players.computer);\n      setNextMove(players.human);\n    }\n  }, [move, grid, players, mode]);\n\n  /**\n   * Make computer move when it's computer's turn\n   */\n  useEffect(() => {\n    let timeout;\n    if (\n      nextMove !== null &&\n      nextMove === players.computer &&\n      gameState !== GAME_STATES.over\n    ) {\n      // Delay computer moves to make them more natural\n      timeout = setTimeout(() => {\n        computerMove();\n      }, 500);\n    }\n    return () => timeout && clearTimeout(timeout);\n  }, [nextMove, computerMove, players.computer, gameState]);\n\n  const humanMove = index => {\n    if (!grid[index] && nextMove === players.human) {\n      move(index, players.human);\n      setNextMove(players.computer);\n    }\n  };\n\n  const choosePlayer = option => {\n    setPlayers({ human: option, computer: switchPlayer(option) });\n    setGameState(GAME_STATES.inProgress);\n    setNextMove(PLAYER_X);\n  };\n\n  const startNewGame = () => {\n    setGameState(GAME_STATES.notStarted);\n    setGrid(arr);\n    setModalOpen(false);\n  };\n\n  const changeMode = e => {\n    setMode(e.target.value);\n  };\n\n  return gameState === GAME_STATES.notStarted ? (\n    <Screen>\n      <Inner>\n        <ChooseText>Select difficulty</ChooseText>\n        <select onChange={changeMode} value={mode}>\n          {Object.keys(GAME_MODES).map(key => {\n            const gameMode = GAME_MODES[key];\n            return (\n              <option key={gameMode} value={gameMode}>\n                {key}\n              </option>\n            );\n          })}\n        </select>\n      </Inner>\n      <Inner>\n        <ChooseText>Choose your player</ChooseText>\n        <ButtonRow>\n          <button onClick={() => choosePlayer(PLAYER_X)}>X</button>\n          <p>or</p>\n          <button onClick={() => choosePlayer(PLAYER_O)}>O</button>\n        </ButtonRow>\n      </Inner>\n    </Screen>\n  ) : (\n    <Container dims={DIMS}>\n      {grid.map((value, index) => {\n        const isActive = value !== null;\n\n        return (\n          <Square\n            data-testid={`square_${index}`}\n            key={index}\n            onClick={() => humanMove(index)}\n          >\n            {isActive && <Marker>{value === PLAYER_X ? \"X\" : \"O\"}</Marker>}\n          </Square>\n        );\n      })}\n      <Strikethrough\n        styles={\n          gameState === GAME_STATES.over && board.getStrikethroughStyles()\n        }\n      />\n      <ResultModal\n        isOpen={modalOpen}\n        winner={winner}\n        close={() => setModalOpen(false)}\n        startNewGame={startNewGame}\n      />\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  width: ${({ dims }) => `${dims * (SQUARE_DIMS + 5)}px`};\n  flex-flow: wrap;\n  position: relative;\n`;\n\nconst Square = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: ${SQUARE_DIMS}px;\n  height: ${SQUARE_DIMS}px;\n  ${border};\n\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nSquare.displayName = \"Square\";\n\nconst Marker = styled.p`\n  font-size: 68px;\n`;\n\nconst ButtonRow = styled.div`\n  display: flex;\n  width: 150px;\n  justify-content: space-between;\n`;\n\nconst Screen = styled.div``;\n\nconst Inner = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 30px;\n`;\nconst ChooseText = styled.p``;\n\nconst Strikethrough = styled.div`\n  position: absolute;\n  ${({ styles }) => styles}\n  background-color: indianred;\n  height: 5px;\n  width: ${({ styles }) => !styles && \"0px\"};\n`;\n\nexport default TicTacToe;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport TicTacToe from \"./TicTacToe\";\nimport \"papercss/dist/paper.min.css\";\n\nfunction App() {\n  return (\n    <>\n      <Main>\n        <TicTacToe />\n      </Main>\n      <Footer>\n        <FooterInner>\n          View the code on{\" \"}\n          <a href=\"https://github.com/Clarity-89/React_tic_tac_toe\">Github</a>\n        </FooterInner>\n      </Footer>\n    </>\n  );\n}\n\nconst Main = styled.main`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  flex: 1 0 auto;\n`;\n\nconst Footer = styled.footer`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  flex: 0 0 auto;\n`;\n\nconst FooterInner = styled.div`\n  padding: 16px 0;\n`;\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Modal from \"react-modal\";\nModal.setAppElement(\"#root\");\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}